import asyncio
import re

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

from db.orm import orm_request, orm_get_db, orm_add_user, orm_update_user, orm_get_user
from keyboards import keyboard, inline_button
from states import VendorCode
from utils.get_product import get_info

router = Router()


@router.message(Command('start'))
async def start_handler(msg: types.Message, session: AsyncSession) -> None:
    try:
        await orm_add_user(session, msg)
        await msg.answer('<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üññ –í–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!</b>',
                         reply_markup=keyboard)
    except IntegrityError:
        await msg.answer('<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üññ –í–∞—à ID —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!</b>',
                         reply_markup=keyboard)


@router.message(F.text == '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä—É')
async def get_button(msg: types.Message, state: FSMContext) -> None:
    await msg.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ c <em>Wildberries</em></b>  üñä')
    await state.set_state(VendorCode.code)


@router.message(VendorCode.code, F.text)
async def enter_code(msg: types.Message, state: FSMContext, session: AsyncSession) -> None:
    await state.update_data(code=msg.text)
    data = await state.get_data()
    try:
        result = await get_info(data)
        await orm_request(session, data, msg)
        await msg.answer(text=result, reply_markup=inline_button)
    except:
        await msg.answer(text='<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>')
    await state.clear()


@router.message(F.text == '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î')
async def get_DB(msg: types.Message, session: AsyncSession) -> None:
    db_result = await orm_get_db(session, msg)
    if db_result:
        await msg.answer(text='<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:</b>')
        for obj in db_result:
            await msg.answer(text=f'<b>ID –∑–∞–ø—Ä–æ—Å–∞:</b> <u>{obj.id}</u>\n'
                                  f'<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <u>{obj.user_id}</u>\n'
                                  f'<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:</b> <u>{obj.time}</u>\n'
                                  f'<b>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –∞—Ä—Ç–∏–∫—É–ª:</b> <u>{obj.vendor_code}</u>')
    else:
        await msg.answer(text='<b>–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç</b>')


@router.callback_query()
async def subscribe_callback(callback: CallbackQuery, session: AsyncSession) -> None:
    if callback.data == 'True':
        code = re.split(r'\s', re.search(r'–ê—Ä—Ç–∏–∫—É–ª: (\S+)', callback.message.text)[0])
        await orm_update_user(session, callback.from_user.id, flag=True)
        await callback.message.answer(text='<b>üí• –ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ üí•</b>')
        while True:
            await asyncio.sleep(300)
            user = await orm_get_user(session, callback.from_user.id)
            if user.spam:
                result = await get_info({'code': code[1]})
                await callback.message.answer(result)
            else:
                break


@router.message(F.text == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
async def get_button(msg: types.Message, session: AsyncSession) -> None:
    await orm_update_user(session, msg.from_user.id, flag=False)
    await msg.answer(text='<b>–ü–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã</b>  ‚ùå')
